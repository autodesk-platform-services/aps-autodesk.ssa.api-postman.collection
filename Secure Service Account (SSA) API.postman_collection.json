{
	"info": {
		"_postman_id": "8eac5f05-6757-479e-b324-8f191717c9c5",
		"name": "Secure Service Account (SSA) API",
		"description": "Collection to manage SSA from account creation to token generation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39082503"
	},
	"item": [
		{
			"name": "API References",
			"item": [
				{
					"name": "Account Management",
					"item": [
						{
							"name": "SSA API - POST Create Service Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"serviceAccountId\");",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"    pm.environment.set(\"ssa_id\", responseBody.serviceAccountId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {\n//     \"name\": \"{{ssa_name}}\",\n//     \"firstName\": \"{{ssa_first_name}}\",\n//     \"lastName\": \"{{ssa_last_name}}\"\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - GET Get All Service Accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"serviceAccountId\");",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"    pm.environment.set(\"ssa_id\", responseBody.serviceAccountId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - GET Get Service Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"serviceAccountId\");",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"    pm.environment.set(\"ssa_id\", responseBody.serviceAccountId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - PATCH Enable or Disable Service Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty and has valid values\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"serviceAccountId\");",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"",
											"    pm.expect(responseBody.serviceAccountId).to.eql(pm.environment.set(\"ssa_id\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"DISABLED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - DELETE Delete Service Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"DISABLED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Key Management",
					"item": [
						{
							"name": "SSA API - POST Create Keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"kid\");",
											"    pm.expect(responseBody).to.have.property(\"privateKey\");",
											"    pm.environment.set(\"kid\", responseBody.kid);",
											"    pm.environment.set(\"privateKey\", responseBody.privateKey);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId",
										"keys"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - GET Get All Keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"keys\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId",
										"keys"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - PATCH Enable or Disable Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"DISABLED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys/:keyId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId",
										"keys",
										":keyId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										},
										{
											"key": "keyId",
											"value": "{{kid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - DELETE Delete Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys/:keyId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId",
										"keys",
										":keyId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										},
										{
											"key": "keyId",
											"value": "{{kid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exchange Token",
					"item": [
						{
							"name": "SSA API - POST Exchange token with JWT Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"access_token\");",
											"    pm.environment.set(\"access_token\", responseBody.access_token);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {};",
											"var window = {};",
											"eval(pm.environment.get(\"jsrsasign-js\"));",
											"",
											"// const { sign } = pm.require(\"npm:jsonwebtoken\");",
											"",
											"function createJwtAssertion(kid, privateKey, clientId, oxygenId, scope) {",
											"    console.log(kid, privateKey, clientId, oxygenId, scope);",
											"",
											"    privateKey = privateKey.replace(/\\\\n/g, \"\\n\");",
											"    console.log(privateKey);",
											"",
											"    const currentTime = Math.floor(Date.now() / 1000);",
											"    const expirationTime = currentTime + 300; // 5 minutes from now",
											"",
											"    const baseDomain = pm.environment.get('base_domain');",
											"",
											"    const claims = {",
											"        iss: clientId,",
											"        sub: oxygenId,",
											"        aud: `${baseDomain}authentication/v2/token`,",
											"        exp: expirationTime,",
											"        // iat: currentTime,",
											"        scope: scope.split(\" \"),",
											"    };",
											"",
											"    console.log(claims);",
											"",
											"    const jwtHeader = {",
											"        alg: \"RS256\",",
											"        kid: kid,",
											"        // typ: 'JWT'",
											"    };",
											"",
											"    console.log(jwtHeader);",
											"",
											"    // Encode the JWT",
											"    const sHeader = JSON.stringify(jwtHeader);",
											"    const sPayload = JSON.stringify(claims);",
											"",
											"    const jwtAssertion = KJUR.jws.JWS.sign(jwtHeader.alg, sHeader, sPayload, privateKey);",
											"",
											"    console.log(jwtAssertion);",
											"",
											"    return jwtAssertion;",
											"}",
											"",
											"const jwtAssertion = createJwtAssertion(",
											"    pm.environment.get('kid'),",
											"    pm.environment.get('privateKey'),",
											"    pm.environment.get('client_id'),",
											"    pm.environment.get('ssa_id'),",
											"    pm.environment.get('token_scope'),",
											");",
											"",
											"pm.environment.set(\"jwt_assertion\", jwtAssertion);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{token_scope}}",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{jwt_assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/token",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"token"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tutorials",
			"item": [
				{
					"name": "Task 1 – Create an SSA",
					"item": [
						{
							"name": "Step 0: Naming your SSA",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Naming the SSA, please follow the Naming guides here: https://aps.autodesk.com/en/docs/ssa/v1/developers_guide/naming-guidelines/",
											"",
											"pm.environment.set(\"ssa_name\", \"Put your SSA name here, e.g. service.acc-reports\");",
											"pm.environment.set(\"ssa_first_name\", \"Put your SSA first name here, e.g. service\");",
											"pm.environment.set(\"ssa_last_name\", \"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/health",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"health"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 1: Get an Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"access_token\");",
											"    pm.environment.set(\"access_token_ssa\", responseBody.access_token);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "application:service_account:read application:service_account:write application:service_account_key:write application:service_account_key:read",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/token",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 2: Create SSA",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"serviceAccountId\");",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"    pm.environment.set(\"ssa_id\", responseBody.serviceAccountId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {\n//     \"name\": \"{{ssa_name}}\",\n//     \"firstName\": \"{{ssa_first_name}}\",\n//     \"lastName\": \"{{ssa_last_name}}\"\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 3: Create RSA Private key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"kid\");",
											"    pm.expect(responseBody).to.have.property(\"privateKey\");",
											"    pm.environment.set(\"kid\", responseBody.kid);",
											"    pm.environment.set(\"privateKey\", responseBody.privateKey);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId",
										"keys"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Task 3 – Generate 3-Legged Access Token",
					"item": [
						{
							"name": "Pre-step (Run once)",
							"item": [
								{
									"name": "GET third-party script for JWT Sign",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    pm.environment.set(\"jsrsasign-js\", pm.response.text());",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.20/jsrsasign-all-min.js",
											"protocol": "https",
											"host": [
												"cdnjs",
												"cloudflare",
												"com"
											],
											"path": [
												"ajax",
												"libs",
												"jsrsasign",
												"8.0.20",
												"jsrsasign-all-min.js"
											]
										},
										"description": "From [https://github.com/kjur/jsrsasign<br><br>](https://github.com/kjur/jsrsasign)[https://stackoverflow.com/questions/53965446/how-to-sign-a-jwt-with-a-private-key-pem-in-cryptojs](https://stackoverflow.com/questions/53965446/how-to-sign-a-jwt-with-a-private-key-pem-in-cryptojs)"
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 1 & Step 2: Generate JWT Assertion and Exchange JWT Assertion for a Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"access_token\");",
											"    pm.environment.set(\"access_token\", responseBody.access_token);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Step 1 - Generate JWT Assertion",
											"",
											"var navigator = {};",
											"var window = {};",
											"eval(pm.environment.get(\"jsrsasign-js\"));",
											"",
											"// const { sign } = pm.require(\"npm:jsonwebtoken\");",
											"",
											"function createJwtAssertion(kid, privateKey, clientId, oxygenId, scope) {",
											"    console.log(kid, privateKey, clientId, oxygenId, scope);",
											"",
											"    privateKey = privateKey.replace(/\\\\n/g, \"\\n\");",
											"    console.log(privateKey);",
											"",
											"    const currentTime = Math.floor(Date.now() / 1000);",
											"    const expirationTime = currentTime + 300; // 5 minutes from now",
											"",
											"    const baseDomain = pm.environment.get('base_domain');",
											"",
											"    const claims = {",
											"        iss: clientId,",
											"        sub: oxygenId,",
											"        aud: `${baseDomain}authentication/v2/token`,",
											"        exp: expirationTime,",
											"        iat: currentTime,",
											"        scope: scope.split(\" \"),",
											"    };",
											"",
											"    console.log(claims);",
											"",
											"    const jwtHeader = {",
											"        alg: \"RS256\",",
											"        kid: kid,",
											"        typ: 'JWT'",
											"    };",
											"",
											"    console.log(jwtHeader);",
											"",
											"    // Encode the JWT",
											"    const sHeader = JSON.stringify(jwtHeader);",
											"    const sPayload = JSON.stringify(claims);",
											"",
											"    const jwtAssertion = KJUR.jws.JWS.sign(jwtHeader.alg, sHeader, sPayload, privateKey);",
											"",
											"    console.log(jwtAssertion);",
											"",
											"    return jwtAssertion;",
											"}",
											"",
											"const jwtAssertion = createJwtAssertion(",
											"    pm.environment.get('kid'),",
											"    pm.environment.get('privateKey'),",
											"    pm.environment.get('client_id'),",
											"    pm.environment.get('ssa_id'),",
											"    pm.environment.get('token_scope'),",
											");",
											"",
											"pm.environment.set(\"jwt_assertion\", jwtAssertion);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{token_scope}}",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{jwt_assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/token",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"token"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}