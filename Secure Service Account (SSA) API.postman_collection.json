{
	"info": {
		"_postman_id": "8eac5f05-6757-479e-b324-8f191717c9c5",
		"name": "Secure Service Account (SSA) API",
		"description": "Collection to manage SSA from account creation to token generation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39082503"
	},
	"item": [
		{
			"name": "API References",
			"item": [
				{
					"name": "Account Management",
					"item": [
						{
							"name": "SSA API - POST Create Service Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"serviceAccountId\");",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"    pm.environment.set(\"ssa_id\", responseBody.serviceAccountId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "// {\n//     \"name\": \"{{ssa_name}}\",\n//     \"firstName\": \"{{ssa_first_name}}\",\n//     \"lastName\": \"{{ssa_last_name}}\"\n// }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - GET Get All Service Accounts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody.serviceAccounts).to.be.an(\"array\");",
											"    pm.expect(responseBody.serviceAccounts && responseBody.serviceAccounts.length > 0).to.eql(true);",
											"",
											"    if (responseBody.serviceAccounts.length > 0) {",
											"        pm.environment.set(\"ssa_id\", responseBody.serviceAccounts[0].serviceAccountId);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - GET Get Service Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"serviceAccountId\");",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - PATCH Enable or Disable Service Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty and has valid values\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"serviceAccountId\");",
											"    pm.expect(responseBody).to.have.property(\"email\");",
											"",
											"    pm.expect(responseBody.serviceAccountId).to.eql(pm.environment.set(\"ssa_id\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"DISABLED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - DELETE Delete Service Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"DISABLED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Key Management",
					"item": [
						{
							"name": "SSA API - POST Create Keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"kid\");",
											"    pm.expect(responseBody).to.have.property(\"privateKey\");",
											"    pm.environment.set(\"kid\", responseBody.kid);",
											"    pm.environment.set(\"privateKey\", responseBody.privateKey);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId",
										"keys"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - GET Get All Keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"keys\");",
											"    pm.expect(responseBody.keys).to.be.an(\"array\");",
											"    pm.expect(responseBody.keys && responseBody.keys.length > 0).to.eql(true);",
											"",
											"    if (responseBody.keys.length > 0) {",
											"        pm.environment.set(\"kid\", responseBody.keys[0].kid);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId",
										"keys"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - PATCH Enable or Disable Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"status\": \"DISABLED\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys/:keyId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId",
										"keys",
										":keyId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										},
										{
											"key": "keyId",
											"value": "{{kid}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "SSA API - DELETE Delete Key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.test(\"The ssa_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_first_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});",
											"",
											"pm.test(\"The ssa_last_name is valid\", () => {",
											"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
											"",
											"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token_ssa}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys/:keyId",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"service-accounts",
										":serviceAccountId",
										"keys",
										":keyId"
									],
									"variable": [
										{
											"key": "serviceAccountId",
											"value": "{{ssa_id}}"
										},
										{
											"key": "keyId",
											"value": "{{kid}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Exchange Token",
					"item": [
						{
							"name": "SSA API - POST Exchange token with JWT Assertion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody).to.have.property(\"access_token\");",
											"    pm.environment.set(\"access_token\", responseBody.access_token);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var navigator = {};",
											"var window = {};",
											"eval(pm.environment.get(\"jsrsasign-js\"));",
											"",
											"// const { sign } = pm.require(\"npm:jsonwebtoken\");",
											"",
											"function createJwtAssertion(kid, privateKey, clientId, oxygenId, scope) {",
											"    console.log(kid, privateKey, clientId, oxygenId, scope);",
											"",
											"    privateKey = privateKey.replace(/\\\\n/g, \"\\n\");",
											"    console.log(privateKey);",
											"",
											"    const currentTime = Math.floor(Date.now() / 1000);",
											"    const expirationTime = currentTime + 300; // 5 minutes from now",
											"",
											"    const baseDomain = pm.environment.get('base_domain');",
											"",
											"    const claims = {",
											"        iss: clientId,",
											"        sub: oxygenId,",
											"        aud: `${baseDomain}authentication/v2/token`,",
											"        exp: expirationTime,",
											"        // iat: currentTime,",
											"        scope: scope.split(\" \"),",
											"    };",
											"",
											"    console.log(claims);",
											"",
											"    const jwtHeader = {",
											"        alg: \"RS256\",",
											"        kid: kid,",
											"        // typ: 'JWT'",
											"    };",
											"",
											"    console.log(jwtHeader);",
											"",
											"    // Encode the JWT",
											"    const sHeader = JSON.stringify(jwtHeader);",
											"    const sPayload = JSON.stringify(claims);",
											"",
											"    const jwtAssertion = KJUR.jws.JWS.sign(jwtHeader.alg, sHeader, sPayload, privateKey);",
											"",
											"    console.log(jwtAssertion);",
											"",
											"    return jwtAssertion;",
											"}",
											"",
											"const jwtAssertion = createJwtAssertion(",
											"    pm.environment.get('kid'),",
											"    pm.environment.get('privateKey'),",
											"    pm.environment.get('client_id'),",
											"    pm.environment.get('ssa_id'),",
											"    pm.environment.get('token_scope'),",
											");",
											"",
											"pm.environment.set(\"jwt_assertion\", jwtAssertion);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{client_secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{client_id}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{token_scope}}",
											"type": "text"
										},
										{
											"key": "assertion",
											"value": "{{jwt_assertion}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{base_domain}}authentication/v2/token",
									"host": [
										"{{base_domain}}authentication"
									],
									"path": [
										"v2",
										"token"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Tutorials",
			"item": [
				{
					"name": "Get Started with SSA",
					"item": [
						{
							"name": "Task 1 – Create an SSA",
							"item": [
								{
									"name": "Step 0: Naming your SSA",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Naming the SSA, please follow the Naming guides here: https://aps.autodesk.com/en/docs/ssa/v1/developers_guide/naming-guidelines/",
													"",
													"pm.environment.set(\"ssa_name\", \"Put your SSA name here, e.g. service.acc-reports\");",
													"pm.environment.set(\"ssa_first_name\", \"Put your SSA first name here, e.g. service\");",
													"pm.environment.set(\"ssa_last_name\", \"Put your SSA last name here, e.g. acc-reports-{company name}\");",
													"",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}/health",
											"host": [
												"{{base_domain}}"
											],
											"path": [
												"health"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 1: Get an Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property(\"access_token\");",
													"    pm.environment.set(\"access_token_ssa\", responseBody.access_token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "application:service_account:read application:service_account:write application:service_account_key:write application:service_account_key:read",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_domain}}authentication/v2/token",
											"host": [
												"{{base_domain}}authentication"
											],
											"path": [
												"v2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 2: Create SSA",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property(\"serviceAccountId\");",
													"    pm.expect(responseBody).to.have.property(\"email\");",
													"    pm.environment.set(\"ssa_id\", responseBody.serviceAccountId);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test(\"The ssa_name is valid\", () => {",
													"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
													"",
													"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
													"});",
													"",
													"pm.test(\"The ssa_first_name is valid\", () => {",
													"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
													"",
													"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
													"});",
													"",
													"pm.test(\"The ssa_last_name is valid\", () => {",
													"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
													"",
													"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token_ssa}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "// {\n//     \"name\": \"{{ssa_name}}\",\n//     \"firstName\": \"{{ssa_first_name}}\",\n//     \"lastName\": \"{{ssa_last_name}}\"\n// }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}authentication/v2/service-accounts",
											"host": [
												"{{base_domain}}authentication"
											],
											"path": [
												"v2",
												"service-accounts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 3: Create RSA Private key",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", () => {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property(\"kid\");",
													"    pm.expect(responseBody).to.have.property(\"privateKey\");",
													"    pm.environment.set(\"kid\", responseBody.kid);",
													"    pm.environment.set(\"privateKey\", responseBody.privateKey);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token_ssa}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId/keys",
											"host": [
												"{{base_domain}}authentication"
											],
											"path": [
												"v2",
												"service-accounts",
												":serviceAccountId",
												"keys"
											],
											"variable": [
												{
													"key": "serviceAccountId",
													"value": "{{ssa_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Task 3 – Generate 3-Legged Access Token",
							"item": [
								{
									"name": "Pre-step (Run once)",
									"item": [
										{
											"name": "GET third-party script for JWT Sign",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Response body is not empty\", () => {",
															"    pm.environment.set(\"jsrsasign-js\", pm.response.text());",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.20/jsrsasign-all-min.js",
													"protocol": "https",
													"host": [
														"cdnjs",
														"cloudflare",
														"com"
													],
													"path": [
														"ajax",
														"libs",
														"jsrsasign",
														"8.0.20",
														"jsrsasign-all-min.js"
													]
												},
												"description": "From [https://github.com/kjur/jsrsasign<br><br>](https://github.com/kjur/jsrsasign)[https://stackoverflow.com/questions/53965446/how-to-sign-a-jwt-with-a-private-key-pem-in-cryptojs](https://stackoverflow.com/questions/53965446/how-to-sign-a-jwt-with-a-private-key-pem-in-cryptojs)"
											},
											"response": []
										}
									]
								},
								{
									"name": "Step 1 & Step 2: Generate JWT Assertion and Exchange JWT Assertion for a Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property(\"access_token\");",
													"    pm.environment.set(\"access_token\", responseBody.access_token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Step 1 - Generate JWT Assertion",
													"",
													"var navigator = {};",
													"var window = {};",
													"eval(pm.environment.get(\"jsrsasign-js\"));",
													"",
													"// const { sign } = pm.require(\"npm:jsonwebtoken\");",
													"",
													"function createJwtAssertion(kid, privateKey, clientId, oxygenId, scope) {",
													"    console.log(kid, privateKey, clientId, oxygenId, scope);",
													"",
													"    privateKey = privateKey.replace(/\\\\n/g, \"\\n\");",
													"    console.log(privateKey);",
													"",
													"    const currentTime = Math.floor(Date.now() / 1000);",
													"    const expirationTime = currentTime + 300; // 5 minutes from now",
													"",
													"    const baseDomain = pm.environment.get('base_domain');",
													"",
													"    const claims = {",
													"        iss: clientId,",
													"        sub: oxygenId,",
													"        aud: `${baseDomain}authentication/v2/token`,",
													"        exp: expirationTime,",
													"        iat: currentTime,",
													"        scope: scope.split(\" \"),",
													"    };",
													"",
													"    console.log(claims);",
													"",
													"    const jwtHeader = {",
													"        alg: \"RS256\",",
													"        kid: kid,",
													"        typ: 'JWT'",
													"    };",
													"",
													"    console.log(jwtHeader);",
													"",
													"    // Encode the JWT",
													"    const sHeader = JSON.stringify(jwtHeader);",
													"    const sPayload = JSON.stringify(claims);",
													"",
													"    const jwtAssertion = KJUR.jws.JWS.sign(jwtHeader.alg, sHeader, sPayload, privateKey);",
													"",
													"    console.log(jwtAssertion);",
													"",
													"    return jwtAssertion;",
													"}",
													"",
													"const jwtAssertion = createJwtAssertion(",
													"    pm.environment.get('kid'),",
													"    pm.environment.get('privateKey'),",
													"    pm.environment.get('client_id'),",
													"    pm.environment.get('ssa_id'),",
													"    pm.environment.get('token_scope'),",
													");",
													"",
													"pm.environment.set(\"jwt_assertion\", jwtAssertion);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{token_scope}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{jwt_assertion}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_domain}}authentication/v2/token",
											"host": [
												"{{base_domain}}authentication"
											],
											"path": [
												"v2",
												"token"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Manage Service Accounts",
					"item": [
						{
							"name": "Task 1 – Get All Service Accounts",
							"item": [
								{
									"name": "Step 1: Get an Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property(\"access_token\");",
													"    pm.environment.set(\"access_token_ssa\", responseBody.access_token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "application:service_account:read application:service_account:write application:service_account_key:write application:service_account_key:read",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_domain}}authentication/v2/token",
											"host": [
												"{{base_domain}}authentication"
											],
											"path": [
												"v2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 2: Get all service accounts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody.serviceAccounts).to.be.an(\"array\");",
													"    pm.expect(responseBody.serviceAccounts && responseBody.serviceAccounts.length > 0).to.eql(true);",
													"",
													"    if(responseBody.serviceAccounts.length > 0) {",
													"        pm.environment.set(\"ssa_id\", responseBody.serviceAccounts[0].serviceAccountId);",
													"    }",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test(\"The ssa_name is valid\", () => {",
													"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
													"",
													"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
													"});",
													"",
													"pm.test(\"The ssa_first_name is valid\", () => {",
													"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
													"",
													"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
													"});",
													"",
													"pm.test(\"The ssa_last_name is valid\", () => {",
													"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
													"",
													"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token_ssa}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_domain}}authentication/v2/service-accounts",
											"host": [
												"{{base_domain}}authentication"
											],
											"path": [
												"v2",
												"service-accounts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Task 2 – Delete Service Account",
							"item": [
								{
									"name": "Step 1: Get an Access Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property(\"access_token\");",
													"    pm.environment.set(\"access_token_ssa\", responseBody.access_token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "client_credentials",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "application:service_account:read application:service_account:write application:service_account_key:write application:service_account_key:read",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_domain}}authentication/v2/token",
											"host": [
												"{{base_domain}}authentication"
											],
											"path": [
												"v2",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "Step 2: Delete a service account",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", () => {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.test(\"The ssa_name is valid\", () => {",
													"    pm.expect(pm.environment.get(\"ssa_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
													"",
													"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
													"});",
													"",
													"pm.test(\"The ssa_first_name is valid\", () => {",
													"    pm.expect(pm.environment.get(\"ssa_first_name\")).to.not.equal(\"Put your SSA name here, e.g. service.acc-reports\");",
													"",
													"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
													"});",
													"",
													"pm.test(\"The ssa_last_name is valid\", () => {",
													"    pm.expect(pm.environment.get(\"ssa_last_name\")).to.not.equal(\"Put your SSA last name here, e.g. acc-reports-{company name}\");",
													"",
													"    // If the check is falied, then go back to Step 0: Naming your SSA first to correct the value.",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token_ssa}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"status\": \"DISABLED\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_domain}}authentication/v2/service-accounts/:serviceAccountId",
											"host": [
												"{{base_domain}}authentication"
											],
											"path": [
												"v2",
												"service-accounts",
												":serviceAccountId"
											],
											"variable": [
												{
													"key": "serviceAccountId",
													"value": "{{ssa_id}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Upload Files to the ACC Files Tool",
					"item": [
						{
							"name": "Pre-steps: Get access token for SSA",
							"item": [
								{
									"name": "GET third-party script for JWT Sign (Run once)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    pm.environment.set(\"jsrsasign-js\", pm.response.text());",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://cdnjs.cloudflare.com/ajax/libs/jsrsasign/8.0.20/jsrsasign-all-min.js",
											"protocol": "https",
											"host": [
												"cdnjs",
												"cloudflare",
												"com"
											],
											"path": [
												"ajax",
												"libs",
												"jsrsasign",
												"8.0.20",
												"jsrsasign-all-min.js"
											]
										},
										"description": "From [https://github.com/kjur/jsrsasign<br><br>](https://github.com/kjur/jsrsasign)[https://stackoverflow.com/questions/53965446/how-to-sign-a-jwt-with-a-private-key-pem-in-cryptojs](https://stackoverflow.com/questions/53965446/how-to-sign-a-jwt-with-a-private-key-pem-in-cryptojs)"
									},
									"response": []
								},
								{
									"name": "Generate JWT Assertion and Exchange JWT Assertion for a Token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header present and is application/json\", () => {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Response body is not empty\", () => {",
													"    var responseBody = pm.response.json();",
													"",
													"    pm.expect(responseBody).to.have.property(\"access_token\");",
													"    pm.environment.set(\"access_token\", responseBody.access_token);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Step 1 - Generate JWT Assertion",
													"",
													"var navigator = {};",
													"var window = {};",
													"eval(pm.environment.get(\"jsrsasign-js\"));",
													"",
													"// const { sign } = pm.require(\"npm:jsonwebtoken\");",
													"",
													"function createJwtAssertion(kid, privateKey, clientId, oxygenId, scope) {",
													"    console.log(kid, privateKey, clientId, oxygenId, scope);",
													"",
													"    privateKey = privateKey.replace(/\\\\n/g, \"\\n\");",
													"    console.log(privateKey);",
													"",
													"    const currentTime = Math.floor(Date.now() / 1000);",
													"    const expirationTime = currentTime + 300; // 5 minutes from now",
													"",
													"    const baseDomain = pm.environment.get('base_domain');",
													"",
													"    const claims = {",
													"        iss: clientId,",
													"        sub: oxygenId,",
													"        aud: `${baseDomain}authentication/v2/token`,",
													"        exp: expirationTime,",
													"        iat: currentTime,",
													"        scope: scope.split(\" \"),",
													"    };",
													"",
													"    console.log(claims);",
													"",
													"    const jwtHeader = {",
													"        alg: \"RS256\",",
													"        kid: kid,",
													"        typ: 'JWT'",
													"    };",
													"",
													"    console.log(jwtHeader);",
													"",
													"    // Encode the JWT",
													"    const sHeader = JSON.stringify(jwtHeader);",
													"    const sPayload = JSON.stringify(claims);",
													"",
													"    const jwtAssertion = KJUR.jws.JWS.sign(jwtHeader.alg, sHeader, sPayload, privateKey);",
													"",
													"    console.log(jwtAssertion);",
													"",
													"    return jwtAssertion;",
													"}",
													"",
													"const jwtAssertion = createJwtAssertion(",
													"    pm.environment.get('kid'),",
													"    pm.environment.get('privateKey'),",
													"    pm.environment.get('client_id'),",
													"    pm.environment.get('ssa_id'),",
													"    pm.environment.get('token_scope'),",
													");",
													"",
													"pm.environment.set(\"jwt_assertion\", jwtAssertion);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{client_secret}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{client_id}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "urn:ietf:params:oauth:grant-type:jwt-bearer",
													"type": "text"
												},
												{
													"key": "scope",
													"value": "{{token_scope}}",
													"type": "text"
												},
												{
													"key": "assertion",
													"value": "{{jwt_assertion}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{base_domain}}authentication/v2/token",
											"host": [
												"{{base_domain}}authentication"
											],
											"path": [
												"v2",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Step 1: Find the Hub ID for the ACC Account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"hub_id\"",
											"const hub_name = pm.variables.get(\"hub_name\");",
											"pm.test(\"find matches account by name: \" + hub_name, function () {",
											"    const body = pm.response.json();",
											"    const found = body.data.find(d => d.attributes.name == hub_name);",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    pm.environment.set(\"hub_id\", found.id);",
											"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"hub_id\");",
											"pm.environment.unset(\"project_id\");",
											"",
											"pm.variables.set(\"hub_name\", \"change to your hub/account name\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs"
									],
									"query": [
										{
											"key": "filter[extension.type]",
											"value": "hubs:autodesk.bim360:Account"
										}
									]
								},
								"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
							},
							"response": []
						},
						{
							"name": "Step 2: Find the Project ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"project_id\");",
											"pm.environment.unset(\"project_id_without_b\");",
											"pm.environment.unset(\"review_id\");",
											"pm.environment.unset(\"version_id\");",
											"",
											"pm.variables.set(\"project_name\", \"change to your project name\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"project_id\"",
											"const project_name = pm.variables.get(\"project_name\") ",
											"pm.test(\"find matches project by name: \" + project_name, function () {",
											"    const body = pm.response.json();",
											"    const found = body.data.find(d => d.attributes.name == project_name)",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    pm.environment.set(\"project_id\", found.id);",
											"    //pm.variables.set(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}project/v1/hubs/:hubId/projects",
									"host": [
										"{{base_domain}}project"
									],
									"path": [
										"v1",
										"hubs",
										":hubId",
										"projects"
									],
									"variable": [
										{
											"key": "hubId",
											"value": "{{hub_id}}"
										}
									]
								},
								"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
							},
							"response": []
						},
						{
							"name": "Step 3: Find the `Project Files` Folder ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"folder_name\", \"Project Files\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"project_id\"",
											"const folder_name = pm.variables.get(\"folder_name\") ",
											"pm.test(\"find matches project by name: \" + folder_name, function () {",
											"    const body = pm.response.json();",
											"    const found = body.data.find(d => d.attributes.name == folder_name)",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    pm.environment.set(\"folder_id\", found.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}project/v1/hubs/:hubId/projects/:projectId/topFolders",
									"host": [
										"{{base_domain}}project"
									],
									"path": [
										"v1",
										"hubs",
										":hubId",
										"projects",
										":projectId",
										"topFolders"
									],
									"variable": [
										{
											"key": "hubId",
											"value": "{{hub_id}}"
										},
										{
											"key": "projectId",
											"value": "{{project_id}}"
										}
									]
								},
								"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
							},
							"response": []
						},
						{
							"name": "Step 4: Find the Nested Folder ID (Optional)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"folder_name\", \"My Folder\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"project_id\"",
											"const folder_name = pm.variables.get(\"folder_name\") ",
											"pm.test(\"find matches project by name: \" + folder_name, function () {",
											"    const body = pm.response.json();",
											"    const found = body.data.find(d => d.attributes.name == folder_name)",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    pm.environment.set(\"folder_id\", found.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}project/v1/hubs/:hubId/projects/:projectId/folders/:folderId/contents",
									"host": [
										"{{base_domain}}project"
									],
									"path": [
										"v1",
										"hubs",
										":hubId",
										"projects",
										":projectId",
										"folders",
										":folderId",
										"contents"
									],
									"variable": [
										{
											"key": "hubId",
											"value": "{{hub_id}}"
										},
										{
											"key": "projectId",
											"value": "{{project_id}}"
										},
										{
											"key": "folderId",
											"value": "{{folder_id}}"
										}
									]
								},
								"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
							},
							"response": []
						},
						{
							"name": "Step 5: Create a Storage Object",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/vnd.api+json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.has.property('data');",
											"    pm.expect(responseBody.data).to.has.property('id');",
											"",
											"    // var urnParts = responseBody.data.id.replace('urn:adsk.objects:os.object:', '').split('/');",
											"    // pm.expect(urnParts).to.has.length(2);",
											"    pm.environment.set(\"storage_object_id\", responseBody.data.id);",
											"    // pm.environment.set(\"storage_buckey_key\", urnParts[0]);",
											"    // pm.environment.set(\"storage_object_key\", urnParts[1]);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"function guid(format = 'xxxxxxxxxx') {",
											"    var d = new Date().getTime()",
											"",
											"    var guid = format.replace(",
											"        /[xy]/g,",
											"        function (c) {",
											"        var r = (d + Math.random() * 16) % 16 | 0",
											"        d = Math.floor(d / 16)",
											"        return (c == 'x' ? r : (r & 0x7 | 0x8)).toString(16)",
											"        })",
											"",
											"    return guid",
											"}",
											"",
											"Date.prototype.addDays = function(days) {",
											"    var date = new Date(this.valueOf());",
											"    date.setDate(date.getDate() + days);",
											"    return date;",
											"}",
											"",
											"pm.environment.set(\"upload_filename\", \"rac_simple_house_project-\" + guid() + \".rvt\");"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"jsonapi\":{\n      \"version\":\"1.0\"\n   },\n   \"data\":{\n      \"type\":\"objects\",\n      \"attributes\":{\n         \"name\":\"{{upload_filename}}\"\n      },\n      \"relationships\":{\n         \"target\":{\n            \"data\":{\n               \"type\":\"folders\",\n               \"id\":\"{{folder_id}}\"\n            }\n         }\n      }\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}data/v1/projects/:projectId/storage",
									"host": [
										"{{base_domain}}data"
									],
									"path": [
										"v1",
										"projects",
										":projectId",
										"storage"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 6: Generate a Signed S3 URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.has.property('uploadKey');",
											"    pm.expect(responseBody).to.has.property('urls');",
											"    pm.expect(responseBody.urls).to.has.length.and.is.not.eqls(0);",
											"",
											"    pm.environment.set(\"file_upload_key\", responseBody.uploadKey);",
											"    pm.environment.set(\"file_upload_url\", responseBody.urls[0]);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var storageObjectId = pm.environment.get('storage_object_id');",
											"",
											"var urnParts = storageObjectId.replace('urn:adsk.objects:os.object:', '').split('/');",
											"pm.expect(urnParts).to.has.length(2);",
											"pm.variables.set(\"storage_buckey_key\", urnParts[0]);",
											"pm.variables.set(\"storage_object_key\", urnParts[1]);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_domain}}oss/v2/buckets/:bucketKey/objects/:objectKey/signeds3upload",
									"host": [
										"{{base_domain}}oss"
									],
									"path": [
										"v2",
										"buckets",
										":bucketKey",
										"objects",
										":objectKey",
										"signeds3upload"
									],
									"variable": [
										{
											"key": "bucketKey",
											"value": "{{storage_buckey_key}}"
										},
										{
											"key": "objectKey",
											"value": "{{storage_object_key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 7: Upload a File to the Signed URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "file",
									"file": {
										"src": ""
									}
								},
								"url": {
									"raw": "{{file_upload_url}}",
									"host": [
										"{{file_upload_url}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 8: Complete the Upload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"var storageObjectId = pm.environment.get('storage_object_id');",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.be.an('object');",
											"    pm.expect(responseBody).to.has.property('data');",
											"    pm.expect(responseBody.data).to.has.property('bucketKey');",
											"    pm.expect(responseBody.data).to.has.property('objectId');",
											"",
											"    pm.expect(responseBody.data.bucketKey).to.be.a('string');",
											"    pm.expect(responseBody.data.objectId).to.be.a('string');",
											"",
											"    pm.expect(responseBody.data.objectId).to.eqls(storageObjectId);",
											"",
											"    if  (responseBody.data.objectId == storageObjectId) {",
											"        pm.environment.set('storage_object_id', responseBody.data.objectId);",
											"    } else {",
											"        pm.environment.unset('storage_object_id');",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var storageObjectId = pm.environment.get('storage_object_id');",
											"",
											"var urnParts = storageObjectId.replace('urn:adsk.objects:os.object:', '').split('/');",
											"pm.expect(urnParts).to.has.length(2);",
											"pm.variables.set(\"storage_buckey_key\", urnParts[0]);",
											"pm.variables.set(\"storage_object_key\", urnParts[1]);"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"uploadKey\": \"{{file_upload_key}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}oss/v2/buckets/:bucketKey/objects/:objectKey/signeds3upload",
									"host": [
										"{{base_domain}}oss"
									],
									"path": [
										"v2",
										"buckets",
										":bucketKey",
										"objects",
										":objectKey",
										"signeds3upload"
									],
									"variable": [
										{
											"key": "bucketKey",
											"value": "{{storage_buckey_key}}"
										},
										{
											"key": "objectKey",
											"value": "{{storage_object_key}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Step 9: Create the First Version of the File",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/vnd.api+json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/vnd.api+json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.be.an(\"object\");",
											"    pm.expect(responseBody).to.has.property('data');",
											"    pm.expect(responseBody.data).to.has.property('id');",
											"",
											"    pm.environment.set('file_item_id', responseBody.data.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {},
										"requests": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/vnd.api+json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"jsonapi\":{\n      \"version\":\"1.0\"\n   },\n   \"data\":{\n      \"type\":\"items\",\n      \"attributes\":{\n         \"displayName\":\"{{upload_filename}}\",\n         \"extension\":{\n            \"type\":\"items:autodesk.bim360:File\",\n            \"version\":\"1.0\"\n         }\n      },\n      \"relationships\":{\n         \"tip\":{\n            \"data\":{\n               \"type\":\"versions\",\n               \"id\":\"1\"\n            }\n         },\n         \"parent\":{\n            \"data\":{\n               \"type\":\"folders\",\n               \"id\":\"{{folder_id}}\"\n            }\n         }\n      }\n   },\n   \"included\":[\n      {\n         \"type\":\"versions\",\n         \"id\":\"1\",\n         \"attributes\":{\n            \"name\":\"{{upload_filename}}\",\n            \"extension\":{\n               \"type\":\"versions:autodesk.bim360:File\",\n               \"version\":\"1.0\"\n            }\n         },\n         \"relationships\":{\n            \"storage\":{\n               \"data\":{\n                  \"type\":\"objects\",\n                  \"id\":\"{{storage_object_id}}\"\n               }\n            }\n         }\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_domain}}data/v1/projects/:projectId/items",
									"host": [
										"{{base_domain}}data"
									],
									"path": [
										"v1",
										"projects",
										":projectId",
										"items"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Follow the instructions at [https://aps.autodesk.com/en/docs/acc/v1/tutorials/files/upload-document-s3/,](https://aps.autodesk.com/en/docs/acc/v1/tutorials/files/upload-document-s3/,) but use access token generated from SSA"
				}
			]
		}
	]
}